var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CoolWalksUtils","category":"page"},{"location":"#CoolWalksUtils","page":"Home","title":"CoolWalksUtils","text":"","category":"section"},{"location":"#changed-title","page":"Home","title":"changed title","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CoolWalksUtils.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CoolWalksUtils]","category":"page"},{"location":"#CoolWalksUtils.OSM_ref","page":"Home","title":"CoolWalksUtils.OSM_ref","text":"Reference which holds the WSG84 (EPSG4326) ArchGDAL Spatial Reference System with lon-lat order.\n\n\n\n\n\n","category":"constant"},{"location":"#CoolWalksUtils.algorithm_1-Tuple{Any, Any}","page":"Home","title":"CoolWalksUtils.algorithm_1","text":"algorithm_1(t_2060, longitude)\n\nalgorithm 1 to calculate the sun position as described by Roberto Grena (2012), Five new algorithms for the computation of sun position from 2010 to 2110, Solar Energy, 86(5):1323–1337, doi:10.1016/j.solener.2012.01.024. Simplified to not use TT-UT, pressure and temperature.\n\n\n\n\n\n","category":"method"},{"location":"#CoolWalksUtils.get_local_sun_pos-Tuple{Any, Any, Any}","page":"Home","title":"CoolWalksUtils.get_local_sun_pos","text":"get_local_sun_pos(latitude, declination, hour_angle)\n\ntransform the location of the sun in the sky from global coordinates into spherical coordinates local to latitude and longitude used to calculate the inputs.\n\nReturns\n\n(elevation, azimuth) The elevation is the heigth of the sun above the horizon, in radians. The azimuth is the horizontal position of the sun in a polar coordinate system, where azimuth=0 points to the south pole. negative angles point to the east, positive to the west. again, in radians.\n\n\n\n\n\n","category":"method"},{"location":"#CoolWalksUtils.sunposition","page":"Home","title":"CoolWalksUtils.sunposition","text":"sunposition(date::DateTime, longitude, latitude, timezone::Int=1, daylight_saving::Bool=true)\n\nNotes on Arguments\n\ndate is assumed to be in local time. \ntimezone and daylight_saving are used to convert to gmt. If the time is allready gmt, set timezone=0 and daylight_saving=false\n\n\n\n\n\n","category":"function"},{"location":"#CoolWalksUtils.sunposition-2","page":"Home","title":"CoolWalksUtils.sunposition","text":"sunposition(time, day::Int, month::Int, year::Int, longitude, latitude, timezone::Int=1, daylight_saving::Bool=true)\n\nNotes on Arguments\n\ntime is local time in hours. Convert minutes and seconds... to fractions of hours. (13:30 becomes 13.5) range from 0 to 24.\ntimezone and daylight_saving are used to convert to gmt. If the time is allready gmt, set timezone=0 and daylight_saving=false\n\n\n\n\n\n","category":"function"},{"location":"#CoolWalksUtils.sunposition-3","page":"Home","title":"CoolWalksUtils.sunposition","text":"Functions to calculate the sun position, adapted from Roberto Grena (2012), Five new algorithms for the computation of sun position from 2010 to 2110, Solar Energy, 86(5):1323–1337, doi:10.1016/j.solener.2012.01.024.\n\nwe use only algorithm 1 and omit the inputs of TT-UT, pressure and temperature, since we do not need the precision to launch satellites\n\nNotes on Arguments\n\nlongitude has to be in radians from 0 to 2π, starting from Greenwitch going east\nlatitude has to be in radians from -π to -π, starting from south pole, going north\n\nReturn\n\nArray with 3 entries [x,y,z], representing vector pointing towards sun in local, cartesian coordinate system, centered at longitude, latitude with x pointing east, y pointing north and z pointing up.\n\n\n\n\n\n","category":"function"}]
}
